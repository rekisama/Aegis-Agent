"""
Dynamic Tool: data_statistics
Auto-generated by Agent
"""

import json
import logging
from typing import Dict, Any
from ...tools.base import BaseTool, ToolResult


class DynamicData_statisticsTool(BaseTool):
    """Dynamic tool: data_statistics"""
    
    def __init__(self):
        super().__init__()
        self.name = "data_statistics"
        self.description = "Dynamic tool created by agent"
    
    async def execute(self, **kwargs) -> ToolResult:
        """Execute the dynamic tool"""
        try:
            # 参数验证
            validated_params = self._validate_parameters(kwargs)
            
            # 执行动态代码
            result = self._execute_dynamic_code(validated_params)
            
            return ToolResult(
                success=True,
                data={"result": result},
                error=None
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                data={},
                error=str(e)
            )
    
    def _validate_parameters(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """验证参数"""
        # 这里可以添加参数验证逻辑
        return params
    
    def _execute_dynamic_code(self, params: Dict[str, Any]) -> Any:
        """执行动态代码"""
        # 创建局部变量环境
        local_vars = {}
        local_vars.update(params)
        
        # 执行代码
        exec("""
```python
import numpy as np
from scipy import stats

# Get input parameters
data = params.get('data', [])
requested_stats = params.get('statistics', ['mean', 'median', 'mode', 'std', 'min', 'max', 'sum', 'variance'])

result = {}
valid_stats = {
    'mean': lambda x: np.mean(x),
    'median': lambda x: np.median(x),
    'mode': lambda x: stats.mode(x)[0][0],
    'std': lambda x: np.std(x),
    'min': lambda x: np.min(x),
    'max': lambda x: np.max(x),
    'sum': lambda x: np.sum(x),
    'variance': lambda x: np.var(x),
    'range': lambda x: np.max(x) - np.min(x),
    'percentile25': lambda x: np.percentile(x, 25),
    'percentile75': lambda x: np.percentile(x, 75),
    'iqr': lambda x: np.percentile(x, 75) - np.percentile(x, 25)
}

try:
    # Input validation
    if not isinstance(data, (list, tuple, np.ndarray)):
        raise ValueError("Input data must be an array of numbers")
    
    if len(data) == 0:
        raise ValueError("Input data cannot be empty")
    
    # Convert to numpy array for calculations
    data_array = np.array(data, dtype=np.float64)
    
    # Calculate requested statistics
    for stat in requested_stats:
        if stat not in valid_stats:
            continue  # Skip invalid statistics requests
        
        try:
            result[stat] = float(valid_stats[stat](data_array))
        except Exception as e:
            result[stat] = f"Error calculating {stat}: {str(e)}"
""", {}, local_vars)
        
        # 返回结果（假设代码中定义了 result 变量）
        return local_vars.get('result', None)
