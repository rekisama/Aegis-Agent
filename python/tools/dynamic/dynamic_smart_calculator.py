"""
Dynamic Tool: smart_calculator
Auto-generated by Agent
"""

import json
import logging
from typing import Dict, Any
from ...tools.base import BaseTool, ToolResult


class DynamicSmart_calculatorTool(BaseTool):
    """Dynamic tool: smart_calculator"""
    
    def __init__(self):
        super().__init__()
        self.name = "smart_calculator"
        self.description = "Dynamic tool created by agent"
    
    async def execute(self, **kwargs) -> ToolResult:
        """Execute the dynamic tool"""
        try:
            # 参数验证
            validated_params = self._validate_parameters(kwargs)
            
            # 执行动态代码
            result = self._execute_dynamic_code(validated_params)
            
            return ToolResult(
                success=True,
                data={"result": result},
                error=None
            )
            
        except Exception as e:
            return ToolResult(
                success=False,
                data={},
                error=str(e)
            )
    
    def _validate_parameters(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """验证参数"""
        # 这里可以添加参数验证逻辑
        return params
    
    def _execute_dynamic_code(self, params: Dict[str, Any]) -> Any:
        """执行动态代码"""
        # 创建局部变量环境
        local_vars = {}
        local_vars.update(params)
        
        # 执行代码
        exec("""
```python
import math
import re

def evaluate_expression(params):
    """
    Safely evaluates a mathematical expression with given precision.
    
    Args:
        params (dict): Dictionary containing:
            - 'expression': Mathematical expression string (required)
            - 'precision': Decimal precision (optional, default=2)
            
    Returns:
        dict: Result dictionary with 'result' key or 'error' if failed
    """
    try:
        # Get parameters with defaults
        expression = params.get('expression', '').strip()
        precision = params.get('precision', 2)
        
        # Validate parameters
        if not expression:
            return {'error': 'Expression cannot be empty'}
        
        if not isinstance(precision, int) or precision < 0 or precision > 10:
            return {'error': 'Precision must be integer between 0 and 10'}
        
        # Sanitize input - only allow basic math operations and numbers
        allowed_chars = r'[\d+\-*/().^% \t]'
        if not re.fullmatch(f'^{allowed_chars}+$', expression):
            return {'error': 'Invalid characters in expression'}
            
        # Replace ^ with ** for exponentiation
        sanitized_expr = expression.replace('^', '**')
        
        # Validate expression doesn't contain dangerous operations
        forbidden = ['import', 'exec', 'eval', 'lambda', ';',
""", {}, local_vars)
        
        # 返回结果（假设代码中定义了 result 变量）
        return local_vars.get('result', None)
