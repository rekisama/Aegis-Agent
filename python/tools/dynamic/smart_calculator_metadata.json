{
  "name": "smart_calculator",
  "description": "Advanced calculator with mathematical expression evaluation",
  "code": "```python\nimport math\nimport re\n\ndef evaluate_expression(params):\n    \"\"\"\n    Safely evaluates a mathematical expression with given precision.\n    \n    Args:\n        params (dict): Dictionary containing:\n            - 'expression': Mathematical expression string (required)\n            - 'precision': Decimal precision (optional, default=2)\n            \n    Returns:\n        dict: Result dictionary with 'result' key or 'error' if failed\n    \"\"\"\n    try:\n        # Get parameters with defaults\n        expression = params.get('expression', '').strip()\n        precision = params.get('precision', 2)\n        \n        # Validate parameters\n        if not expression:\n            return {'error': 'Expression cannot be empty'}\n        \n        if not isinstance(precision, int) or precision < 0 or precision > 10:\n            return {'error': 'Precision must be integer between 0 and 10'}\n        \n        # Sanitize input - only allow basic math operations and numbers\n        allowed_chars = r'[\\d+\\-*/().^% \\t]'\n        if not re.fullmatch(f'^{allowed_chars}+$', expression):\n            return {'error': 'Invalid characters in expression'}\n            \n        # Replace ^ with ** for exponentiation\n        sanitized_expr = expression.replace('^', '**')\n        \n        # Validate expression doesn't contain dangerous operations\n        forbidden = ['import', 'exec', 'eval', 'lambda', ';',",
  "parameters": {
    "expression": {
      "type": "string",
      "description": "Mathematical expression to evaluate",
      "required": true
    },
    "precision": {
      "type": "integer",
      "description": "Decimal precision",
      "required": false,
      "default": 2
    }
  },
  "category": "utility",
  "created_at": "2025-07-21T10:45:23.032476",
  "usage_count": 0,
  "success_rate": 0.0
}