"""
Improved Tool System
ÁªìÂêà agent-zero ÂíåÊàë‰ª¨ÁöÑ BaseTool ÁöÑ‰ºòÁÇπ
"""

import asyncio
import json
import logging
from abc import ABC, abstractmethod
from typing import Dict, List, Optional, Any, Callable
from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum


class ToolStatus(Enum):
    """Â∑•ÂÖ∑Áä∂ÊÄÅÊûö‰∏æ"""
    IDLE = "idle"
    EXECUTING = "executing"
    SUCCESS = "success"
    ERROR = "error"
    DISABLED = "disabled"


@dataclass
class Response:
    """Â∑•ÂÖ∑ÊâßË°åÂìçÂ∫î"""
    message: str
    break_loop: bool = False
    success: bool = True
    data: Any = None
    error: Optional[str] = None
    execution_time: float = 0.0
    metadata: Dict[str, Any] = field(default_factory=dict)


class Tool(ABC):
    """
    ÊîπËøõÁâàÂ∑•ÂÖ∑Âü∫Á±ª
    ÁªìÂêà agent-zero Tool ÂíåÊàë‰ª¨ÁöÑ BaseTool ÁöÑ‰ºòÁÇπ
    """
    
    def __init__(self, 
                 agent: Any = None,
                 name: str = None, 
                 method: str = None,
                 args: Dict[str, str] = None,
                 message: str = "",
                 description: str = None,
                 **kwargs):
        self.agent = agent
        self.name = name or self.__class__.__name__
        self.method = method
        self.args = args or {}
        self.message = message
        self.description = description or "An improved tool"
        
        # ÁªüËÆ°‰ø°ÊÅØ
        self.created_at = datetime.now()
        self.usage_count = 0
        self.success_count = 0
        self.last_used = None
        self.status = ToolStatus.IDLE
        
        # Êó•ÂøóÂØπË±°
        self.log = None
        
        logging.info(f"Initialized tool: {self.name}")
    
    @abstractmethod
    async def execute(self, **kwargs) -> Response:
        """
        ÊâßË°åÂ∑•ÂÖ∑
        
        Args:
            **kwargs: Â∑•ÂÖ∑ÂèÇÊï∞
            
        Returns:
            Response: ÊâßË°åÁªìÊûú
        """
        pass
    
    async def before_execution(self, **kwargs):
        """ÊâßË°åÂâçÁöÑÂáÜÂ§áÂ∑•‰Ωú"""
        self.status = ToolStatus.EXECUTING
        self.usage_count += 1
        
        # ÂàõÂª∫Êó•ÂøóÂØπË±°
        self.log = self._get_log_object()
        
        # ÊâìÂç∞ÊâßË°å‰ø°ÊÅØ
        if self.agent:
            self._print_execution_info()
        
        logging.info(f"Tool '{self.name}' execution started")
    
    async def after_execution(self, response: Response, **kwargs):
        """ÊâßË°åÂêéÁöÑÊ∏ÖÁêÜÂ∑•‰Ωú"""
        self.status = ToolStatus.SUCCESS if response.success else ToolStatus.ERROR
        self.last_used = datetime.now()
        
        if response.success:
            self.success_count += 1
        
        # Êõ¥Êñ∞Êó•Âøó
        if self.log:
            self.log.update(content=response.message)
        
        # Ê∑ªÂä†Âà∞ÂéÜÂè≤ËÆ∞ÂΩï
        if self.agent and hasattr(self.agent, 'hist_add_tool_result'):
            self.agent.hist_add_tool_result(self.name, response.message)
        
        # ÊâìÂç∞ÂìçÂ∫î‰ø°ÊÅØ
        if self.agent:
            self._print_response_info(response)
        
        logging.info(f"Tool '{self.name}' execution completed")
    
    def _get_log_object(self):
        """Ëé∑ÂèñÊó•ÂøóÂØπË±°"""
        if not self.agent or not hasattr(self.agent, 'context'):
            return None
        
        heading = f"icon://construction {self.agent.agent_name}: Using tool '{self.name}'"
        if self.method:
            heading += f":{self.method}"
        
        return self.agent.context.log.log(
            type="tool", 
            heading=heading, 
            content="", 
            kvps=self.args
        )
    
    def _print_execution_info(self):
        """ÊâìÂç∞ÊâßË°å‰ø°ÊÅØ"""
        if not self.agent:
            return
        
        print(f"üîß {self.agent.agent_name}: Using tool '{self.name}'")
        
        if self.args:
            for key, value in self.args.items():
                print(f"   {self._nice_key(key)}: {value}")
    
    def _print_response_info(self, response: Response):
        """ÊâìÂç∞ÂìçÂ∫î‰ø°ÊÅØ"""
        if not self.agent:
            return
        
        print(f"üì§ {self.agent.agent_name}: Response from tool '{self.name}'")
        print(f"   {response.message}")
    
    def _nice_key(self, key: str) -> str:
        """ÁæéÂåñÈîÆÂêçÊòæÁ§∫"""
        words = key.split('_')
        words = [words[0].capitalize()] + [word.lower() for word in words[1:]]
        return ' '.join(words)
    
    def get_info(self) -> Dict[str, Any]:
        """Ëé∑ÂèñÂ∑•ÂÖ∑‰ø°ÊÅØ"""
        return {
            "name": self.name,
            "description": self.description,
            "method": self.method,
            "status": self.status.value,
            "created_at": self.created_at.isoformat(),
            "usage_count": self.usage_count,
            "success_count": self.success_count,
            "success_rate": self.success_count / max(self.usage_count, 1),
            "last_used": self.last_used.isoformat() if self.last_used else None,
            "args": self.args
        }
    
    def get_success_rate(self) -> float:
        """Ëé∑ÂèñÊàêÂäüÁéá"""
        return self.success_count / max(self.usage_count, 1)
    
    def is_available(self) -> bool:
        """Ê£ÄÊü•Â∑•ÂÖ∑ÊòØÂê¶ÂèØÁî®"""
        return self.status != ToolStatus.DISABLED
    
    def disable(self):
        """Á¶ÅÁî®Â∑•ÂÖ∑"""
        self.status = ToolStatus.DISABLED
        logging.info(f"Tool '{self.name}' disabled")
    
    def enable(self):
        """ÂêØÁî®Â∑•ÂÖ∑"""
        self.status = ToolStatus.IDLE
        logging.info(f"Tool '{self.name}' enabled")


# ‰æøÊç∑ÁöÑÂåÖË£ÖÂô®ÂáΩÊï∞
async def execute_tool_with_wrapper(tool: Tool, **kwargs) -> Response:
    """‰ΩøÁî®ÂåÖË£ÖÂô®ÊâßË°åÂ∑•ÂÖ∑"""
    try:
        await tool.before_execution(**kwargs)
        response = await tool.execute(**kwargs)
        await tool.after_execution(response, **kwargs)
        return response
    except Exception as e:
        error_response = Response(
            message=f"Tool execution failed: {str(e)}",
            success=False,
            error=str(e)
        )
        await tool.after_execution(error_response, **kwargs)
        return error_response


# Á§∫‰æãÂ∑•ÂÖ∑ÂÆûÁé∞
class ExampleTool(Tool):
    """Á§∫‰æãÂ∑•ÂÖ∑"""
    
    def __init__(self, agent: Any = None):
        super().__init__(
            agent=agent,
            name="example_tool",
            method="demo",
            args={"demo_param": "example_value"},
            message="This is an example tool",
            description="An example tool for demonstration"
        )
    
    async def execute(self, **kwargs) -> Response:
        """ÊâßË°åÁ§∫‰æãÂ∑•ÂÖ∑"""
        # Ê®°ÊãüÊâßË°åÊó∂Èó¥
        await asyncio.sleep(0.1)
        
        return Response(
            message="Example tool executed successfully!",
            data={"result": "success", "timestamp": datetime.now().isoformat()},
            execution_time=0.1
        )


# ÂÖºÂÆπÊÄßÂ∑•ÂÖ∑ÔºàÁªßÊâøËá™BaseToolÁöÑÂ∑•ÂÖ∑ÂèØ‰ª•ËΩ¨Êç¢‰∏∫ToolÔºâ
class ToolAdapter(Tool):
    """Â∑•ÂÖ∑ÈÄÇÈÖçÂô®ÔºåÂ∞ÜBaseToolËΩ¨Êç¢‰∏∫Tool"""
    
    def __init__(self, base_tool, agent: Any = None):
        self.base_tool = base_tool
        super().__init__(
            agent=agent,
            name=base_tool.name,
            description=base_tool.description
        )
    
    async def execute(self, **kwargs) -> Response:
        """ÊâßË°åÂü∫Á°ÄÂ∑•ÂÖ∑Âπ∂ËΩ¨Êç¢‰∏∫Response"""
        try:
            result = await self.base_tool.execute(**kwargs)
            
            # ËΩ¨Êç¢ToolResult‰∏∫Response
            return Response(
                message=str(result.data) if result.data else "Tool executed successfully",
                success=result.success,
                data=result.data,
                error=result.error,
                execution_time=result.execution_time,
                metadata=result.metadata or {}
            )
        except Exception as e:
            return Response(
                message=f"Tool execution failed: {str(e)}",
                success=False,
                error=str(e)
            ) 